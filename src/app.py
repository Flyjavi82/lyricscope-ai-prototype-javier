
import streamlit as st
import os
from ambiguity_engine import AmbiguityEngine

# --- Configuraci√≥n de la p√°gina --- #
st.set_page_config(
    page_title="LyricScope AI: Detector de Ambig√ºedad",
    page_icon="üéµ",
    layout="centered",
    initial_sidebar_state="expanded"
)

# --- T√≠tulo y Descripci√≥n --- #
st.title("üéµ LyricScope AI: Detector de Ambig√ºedad")
st.markdown("Bienvenido a LyricScope AI, tu herramienta para analizar la ambig√ºedad en las letras de canciones. Introduce las letras a continuaci√≥n y descubre sus m√∫ltiples interpretaciones.")

# --- Obtener API Key de OpenAI --- #
# Es crucial que la API Key se configure como una variable de entorno
# para despliegues seguros. Para desarrollo local, puedes ponerla aqu√≠
# o en un archivo .env y cargarla con `dotenv`.
openai_api_key = os.getenv("OPENAI_API_KEY")

if not openai_api_key:
    st.warning("¬°Atenci√≥n! La clave de la API de OpenAI no est√° configurada. Por favor, establece la variable de entorno `OPENAI_API_KEY` o introduce tu clave a continuaci√≥n para probar la aplicaci√≥n.")
    openai_api_key = st.text_input("Introduce tu clave de la API de OpenAI aqu√≠:", type="password")

# --- Inicializar AmbiguityEngine --- #
@st.cache_resource
def get_ambiguity_engine(api_key):
    if api_key:
        return AmbiguityEngine(api_key)
    return None

engine = get_ambiguity_engine(openai_api_key)

# --- √Årea de Entrada de Letras --- #
lyrics_input = st.text_area(
    "Pega aqu√≠ las letras de la canci√≥n para analizar:",
    height=300,
    placeholder="Ejemplo:\nIs this the real life?\nIs this just fantasy?\nCaught in a landslide, no escape from reality."
)

# --- Bot√≥n de An√°lisis --- #
if st.button("Analizar Ambig√ºedad", use_container_width=True):
    if not openai_api_key:
        st.error("Por favor, introduce tu clave de la API de OpenAI para continuar.")
    elif not lyrics_input.strip():
        st.error("Por favor, introduce algunas letras para analizar.")
    elif engine:
        with st.spinner("Analizando la letra... Esto puede tardar unos segundos."):
            try:
                result = engine.detect_ambiguity("Canci√≥n sin t√≠tulo", "Artista Desconocido", lyrics_input)
                
                st.subheader("Resultados del An√°lisis de Ambig√ºedad")
                
                if "error" in result:
                    st.error(f"Ocurri√≥ un error durante el an√°lisis: {result["error"]}")
                else:
                    score = result.get("ambiguity_score", 0.0)
                    is_ambiguous = result.get("is_ambiguous", False)
                    reasoning = result.get("reasoning", "No se proporcion√≥ justificaci√≥n.")
                    interpretations = result.get("multiple_interpretations", [])
                    artistic_intentional = result.get("artistic_intentional_ambiguity", False)
                    notes = result.get("notes", "No hay notas adicionales.")

                    col1, col2 = st.columns([1, 2])
                    with col1:
                        st.metric(label="Puntuaci√≥n de Ambig√ºedad", value=f"{score:.2f}/1.0")
                        if is_ambiguous:
                            st.success("**La canci√≥n es ambigua** ‚úÖ")
                        else:
                            st.info("**La canci√≥n no es ambigua** ‚ùå")
                        
                        if artistic_intentional:
                            st.info("Ambig√ºedad art√≠stica intencional detectada.")

                    with col2:
                        st.write("**Justificaci√≥n:**")
                        st.write(reasoning)

                    if interpretations:
                        st.write("**M√∫ltiples Interpretaciones:**")
                        for i, interp in enumerate(interpretations):
                            st.write(f"- {interp}")
                    
                    if notes:
                        st.write("**Notas Adicionales:**")
                        st.write(notes)

                    with st.expander("Ver JSON Completo del Resultado"):
                        st.json(result)

            except Exception as e:
                st.error(f"Ocurri√≥ un error inesperado: {e}")
                st.exception(e)
    else:
        st.error("El motor de ambig√ºedad no pudo ser inicializado. Por favor, verifica tu clave de la API de OpenAI.")

